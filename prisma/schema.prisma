generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts    Account[]
  sessions    Session[]
  posts       Post[]
  submissions Submission[]
  evidences   Evidence[]
}

model Submission {
  id        String   @id @default(uuid())
  userId    String
  phase     Int
  field     String
  questions Json
  responses String[]
  scores    Int[]
  feedback  String[]
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Evidence {
  id        String   @id @default(uuid())
  userId    String
  filenames String[]
  phase     Int
  field     String
  questions Json
  responses String[]
  scores    Int?
  feedback  String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Certificate {
  id        String   @id @default(uuid())
  userId    String
  pdfUrl    String
  tokenId   String?  // Blockchain Token ID
  txHash    String?  // Transaction hash
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
}
